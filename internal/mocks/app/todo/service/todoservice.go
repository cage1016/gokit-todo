// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cage1016/todo/internal/app/todo/service (interfaces: TodoService)

// Package automocks is a generated GoMock package.
package automocks

import (
	context "context"
	model "github.com/cage1016/todo/internal/app/todo/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTodoService is a mock of TodoService interface
type MockTodoService struct {
	ctrl     *gomock.Controller
	recorder *MockTodoServiceMockRecorder
}

// MockTodoServiceMockRecorder is the mock recorder for MockTodoService
type MockTodoServiceMockRecorder struct {
	mock *MockTodoService
}

// NewMockTodoService creates a new mock instance
func NewMockTodoService(ctrl *gomock.Controller) *MockTodoService {
	mock := &MockTodoService{ctrl: ctrl}
	mock.recorder = &MockTodoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTodoService) EXPECT() *MockTodoServiceMockRecorder {
	return m.recorder
}

// ClearComplete mocks base method
func (m *MockTodoService) ClearComplete(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearComplete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearComplete indicates an expected call of ClearComplete
func (mr *MockTodoServiceMockRecorder) ClearComplete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearComplete", reflect.TypeOf((*MockTodoService)(nil).ClearComplete), arg0)
}

// Complete mocks base method
func (m *MockTodoService) Complete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Complete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Complete indicates an expected call of Complete
func (mr *MockTodoServiceMockRecorder) Complete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockTodoService)(nil).Complete), arg0, arg1)
}

// Get mocks base method
func (m *MockTodoService) Get(arg0 context.Context, arg1 string) (model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockTodoServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTodoService)(nil).Get), arg0, arg1)
}

// List mocks base method
func (m *MockTodoService) List(arg0 context.Context, arg1 string) ([]model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockTodoServiceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTodoService)(nil).List), arg0, arg1)
}

// Post mocks base method
func (m *MockTodoService) Post(arg0 context.Context, arg1 model.Todo) (model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", arg0, arg1)
	ret0, _ := ret[0].(model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post
func (mr *MockTodoServiceMockRecorder) Post(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockTodoService)(nil).Post), arg0, arg1)
}
